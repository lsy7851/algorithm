from solution import solve
from util.test_runner import run_fun_solution

test_cases = [
  # 테스트 케이스 1:
  # 6의 약수: 1, 2, 3  → 1+2+3 = 6 (완전수)
  (
    "6\n-1\n",
    "6 = 1 + 2 + 3\n"
  ),
  # 테스트 케이스 2:
  # 12의 약수: 1, 2, 3, 4, 6  → 합 = 16 ≠ 12 (완전수가 아님)
  (
    "12\n-1\n",
    "12 is NOT perfect.\n"
  ),
  # 테스트 케이스 3:
  # 28의 약수: 1, 2, 4, 7, 14  → 1+2+4+7+14 = 28 (완전수)
  (
    "28\n-1\n",
    "28 = 1 + 2 + 4 + 7 + 14\n"
  ),
  # 테스트 케이스 4:
  # 30의 약수: 1, 2, 3, 5, 6, 10, 15 → 합 = 42 ≠ 30 (완전수가 아님)
  (
    "30\n-1\n",
    "30 is NOT perfect.\n"
  ),
  # 테스트 케이스 5:
  # 496의 약수: 1, 2, 4, 8, 16, 31, 62, 124, 248 → 합 = 496 (완전수)
  (
    "496\n-1\n",
    "496 = 1 + 2 + 4 + 8 + 16 + 31 + 62 + 124 + 248\n"
  ),
  # 테스트 케이스 6:
  # 8128의 약수: 1, 2, 4, 8, 16, 32, 64, 127, 254, 508, 1016, 2032, 4064 → 합 = 8128 (완전수)
  (
    "8128\n-1\n",
    "8128 = 1 + 2 + 4 + 8 + 16 + 32 + 64 + 127 + 254 + 508 + 1016 + 2032 + 4064\n"
  ),
  # 테스트 케이스 7:
  # 여러 값이 입력된 경우
  # 6 → 완전수, 12 → 완전수가 아님, 28 → 완전수
  (
    "6\n12\n28\n-1\n",
    "6 = 1 + 2 + 3\n12 is NOT perfect.\n28 = 1 + 2 + 4 + 7 + 14\n"
  ),
  # 테스트 케이스 8:
  # 30와 60를 입력한 경우
  # 30 → 완전수가 아님, 60의 약수: 1,2,3,4,5,6,10,12,15,20,30 (합 = 108) → 완전수가 아님
  (
    "30\n60\n-1\n",
    "30 is NOT perfect.\n60 is NOT perfect.\n"
  ),
  # 테스트 케이스 9:
  # 56의 약수: 1,2,4,7,8,14,28 → 합 = 64 ≠ 56 (완전수가 아님)
  (
    "56\n-1\n",
    "56 is NOT perfect.\n"
  ),
]


def test():
  for input_data, expected_output in test_cases:
    output = run_fun_solution(input_data, solve)
    assert output == expected_output, f"Input: {input_data!r} Expected: {expected_output!r}, Got: {output!r}"
