from solution import solve
from util.test_runner import run_fun_solution

test_cases = [
  # 테스트 케이스 1:
  # N = 1, 약수: [1] → K=1이면 1, K=1 존재하므로 출력 1.
  (
    "1 1\n",
    "1\n"
  ),
  # 테스트 케이스 2:
  # N = 1, 약수: [1] → K=2는 존재하지 않으므로 출력 0.
  (
    "1 2\n",
    "0\n"
  ),
  # 테스트 케이스 3:
  # N = 6, 약수: [1, 2, 3, 6] → K=3이면 출력 3.
  (
    "6 3\n",
    "3\n"
  ),
  # 테스트 케이스 4:
  # N = 6, 약수: [1, 2, 3, 6] → K=5가 없으므로 출력 0.
  (
    "6 5\n",
    "0\n"
  ),
  # 테스트 케이스 5:
  # N = 16, 약수: [1, 2, 4, 8, 16] → K=3이면 출력 4.
  (
    "16 3\n",
    "4\n"
  ),
  # 테스트 케이스 6:
  # N = 24, 약수: [1, 2, 3, 4, 6, 8, 12, 24] → K=5이면 출력 6.
  (
    "24 5\n",
    "6\n"
  ),
  # 테스트 케이스 7:
  # N = 50, 약수: [1, 2, 5, 10, 25, 50] → K=3이면 출력 5.
  (
    "50 3\n",
    "5\n"
  ),
  # 테스트 케이스 8:
  # N = 100, 약수: [1, 2, 4, 5, 10, 20, 25, 50, 100] → K=9이면 출력 100.
  (
    "100 9\n",
    "100\n"
  ),
  # 테스트 케이스 9:
  # N = 97 (소수), 약수: [1, 97] → K=2이면 출력 97.
  (
    "97 2\n",
    "97\n"
  ),
  # 테스트 케이스 10:
  # N = 1024 = 2^10, 약수: [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]
  # → K=10이면 출력 512.
  (
    "1024 10\n",
    "512\n"
  ),
]


def test():
  for input_data, expected_output in test_cases:
    output = run_fun_solution(input_data, solve)
    assert output == expected_output, f"Input: {input_data!r} Expected: {expected_output!r}, Got: {output!r}"
