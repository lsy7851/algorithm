from solution import solve
from solution_prefix_sum import solve as solve_prefix_sum
from util.test_runner import run_fun_solution

test_cases = [
  # 테스트 케이스 1: 사람 1명, 인출 시간이 3 → 대기시간은 3
  (
    "1\n"
    "3\n",
    "3\n"
  ),
  # 테스트 케이스 2: 사람 2명, 입력이 이미 오름차순
  # 인출 시간이 [1, 2] → 누적합: 1, 1+2=3 → 총 1+3 = 4
  (
    "2\n"
    "1 2\n",
    "4\n"
  ),
  # 테스트 케이스 3: 사람 2명, 입력 순서가 뒤바뀐 경우
  # 인출 시간이 [2, 1] → 정렬 후 [1,2], 총 대기시간 4
  (
    "2\n"
    "2 1\n",
    "4\n"
  ),
  # 테스트 케이스 4: 사람 5명, 인출 시간이 [3, 1, 4, 3, 2]
  # 정렬 후: [1, 2, 3, 3, 4]
  # 누적합: 1, (1+2)=3, (1+2+3)=6, (1+2+3+3)=9, (1+2+3+3+4)=13 → 총합 = 1+3+6+9+13 = 32
  (
    "5\n"
    "3 1 4 3 2\n",
    "32\n"
  ),
  # 테스트 케이스 5: 사람 5명, 모두 1분씩 인출: [1, 1, 1, 1, 1]
  # 누적합: 1,2,3,4,5 → 총 1+2+3+4+5 = 15
  (
    "5\n"
    "1 1 1 1 1\n",
    "15\n"
  ),
  # 테스트 케이스 6: 사람 4명, 인출 시간이 [5, 4, 3, 2]
  # 정렬 후: [2, 3, 4, 5]
  # 누적합: 2, 2+3=5, 2+3+4=9, 2+3+4+5=14 → 총합 = 2+5+9+14 = 30
  (
    "4\n"
    "5 4 3 2\n",
    "30\n"
  ),
  # 테스트 케이스 7: 사람 7명, 인출 시간이 [3, 6, 1, 8, 2, 4, 5]
  # 정렬 후: [1, 2, 3, 4, 5, 6, 8]
  # 누적합: 1,3,6,10,15,21,29 → 총합 = 1+3+6+10+15+21+29 = 85
  (
    "7\n"
    "3 6 1 8 2 4 5\n",
    "85\n"
  ),
  # 테스트 케이스 8: 사람 9명, 모두 10분씩 인출 → [10,10,...,10]
  # 누적합: 10,20,30,...,90 → 총합 = 10+20+...+90 = 450
  (
    "9\n"
    "10 10 10 10 10 10 10 10 10\n",
    "450\n"
  ),
  # 테스트 케이스 9: 사람 5명, 인출 시간이 [100, 1, 50, 20, 3]
  # 정렬 후: [1, 3, 20, 50, 100]
  # 누적합: 1, 4, 24, 74, 174 → 총합 = 1+4+24+74+174 = 277
  (
    "5\n"
    "100 1 50 20 3\n",
    "277\n"
  ),
  # 테스트 케이스 10: 사람 10명, 인출 시간이 [3, 1, 4, 1, 5, 9, 2, 6, 5, 3]
  # 정렬 후: [1, 1, 2, 3, 3, 4, 5, 5, 6, 9]
  # 누적합: 1,2,4,7,10,14,19,24,30,39 → 총합 = 1+2+4+7+10+14+19+24+30+39 = 150
  (
    "10\n"
    "3 1 4 1 5 9 2 6 5 3\n",
    "150\n"
  ),
]


def test():
  for input_data, expected_output in test_cases:
    output = run_fun_solution(input_data, solve)
    assert output == expected_output, f"Input: {input_data!r} Expected: {expected_output!r}, Got: {output!r}"


def test_prefix_sum():
  for input_data, expected_output in test_cases:
    output = run_fun_solution(input_data, solve_prefix_sum)
    assert output == expected_output, f"Input: {input_data!r} Expected: {expected_output!r}, Got: {output!r}"
